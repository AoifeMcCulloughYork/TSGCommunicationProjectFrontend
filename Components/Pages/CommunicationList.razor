
@page "/communications"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using TSGCommunicationProjectFrontend.Dtos
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Communications</h3>

@if (communications == null)
{
    <p><em>Loading...</em></p>
}
else if (!communications.Any())
{
    <p>No communications found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>
                    <button class="btn btn-link p-0" @onclick="() => SortBy(nameof(CommunicationDto.TypeCode))">
                        Type Code
                        @if (currentSort == nameof(CommunicationDto.TypeCode))
                        {
                            <span>@(sortAscending ? "▲" : "▼")</span>
                        }
                    </button>
                </th>
                <th>Status</th>
                <th>
                    <button class="btn btn-link p-0" @onclick="() => SortBy(nameof(CommunicationDto.LastUpdatedUtc))">
                        Last Updated
                        @if (currentSort == nameof(CommunicationDto.LastUpdatedUtc))
                        {
                            <span>@(sortAscending ? "▲" : "▼")</span>
                        }
                    </button>
                </th>
                <th>
                    Details
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comm in GetSortedCommunications())
            {
                <tr>
                    <td>@comm.Title</td>
                    <td>@comm.TypeCode</td>
                    <td>@comm.CurrentStatus</td>
                    <td>@comm.LastUpdatedUtc.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToDetails(comm.Id)">
                            Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CommunicationDto>? communications;
    private string currentSort = nameof(CommunicationDto.LastUpdatedUtc);
    private bool sortAscending = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("http://localhost:5000/all");
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw response: {content}");
            
            communications = await Http.GetFromJsonAsync<List<CommunicationDto>>("http://localhost:5000/all");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching communications: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            communications = new List<CommunicationDto>();
        }
    }

    private void TestClick()
{
    Console.WriteLine("Button clicked!");
    StateHasChanged();
}
    private async Task SortBy(string property)
    {
        Console.WriteLine($"Sorting by: {property}");
        if (currentSort == property)
        {
            sortAscending = !sortAscending;
            Console.WriteLine($"Toggling sort direction. Now ascending: {sortAscending}");
        }
        else
        {
            currentSort = property;
            sortAscending = true;
            Console.WriteLine($"New sort column. Setting ascending: {sortAscending}");
        }
        Console.WriteLine($"Current sort state - Column: {currentSort}, Ascending: {sortAscending}");
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<CommunicationDto> GetSortedCommunications()
    {
        if (communications == null) return Enumerable.Empty<CommunicationDto>();

        return currentSort switch
        {
            nameof(CommunicationDto.TypeCode) => sortAscending 
                ? communications.OrderBy(c => c.TypeCode) 
                : communications.OrderByDescending(c => c.TypeCode),
            nameof(CommunicationDto.LastUpdatedUtc) => sortAscending 
                ? communications.OrderBy(c => c.LastUpdatedUtc) 
                : communications.OrderByDescending(c => c.LastUpdatedUtc),
            _ => communications
        };
    }
    private void NavigateToDetails(Guid communicationId)
    {
        Console.WriteLine($"navigating to {communicationId}");
        if (Navigation == null)
    {
        Console.WriteLine("Navigation is null!");
        return;
    }
        Navigation.NavigateTo($"/communication/{communicationId}", forceLoad: true);
    }
}
