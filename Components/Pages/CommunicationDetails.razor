@page "/communication/{Id:guid}"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using TSGCommunicationProjectFrontend.Dtos
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Communication Details</h3>

@if (communication == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h4>@communication.Title</h4>
        <p><strong>ID:</strong> @communication.Id</p>
        <p><strong>Type Code:</strong> @communication.TypeCode</p>
        <p><strong>Status:</strong> @communication.CurrentStatus</p>
        <p><strong>Last Updated:</strong> @communication.LastUpdatedUtc.ToString("yyyy-MM-dd HH:mm:ss") UTC</p>
    </div>

    <h4>Status History</h4>
    @if (communicationHistory == null)
    {
        <p><em>Loading history...</em></p>
    }
    else if (!communicationHistory.Any())
    {
        <p><em>No history found.</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Status</th>
                    <th>Timestamp</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in communicationHistory.OrderByDescending(h => h.OccurredUtc))
                {
                    <tr>
                        <td>@item.StatusCode</td>
                        <td>@item.OccurredUtc.ToString("yyyy-MM-dd HH:mm:ss") UTC</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }
    
    private CommunicationDto? communication;
    private IEnumerable<CommunicationStatusHistoryItemDto>? communicationHistory;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load communication details and history in parallel
            var communicationTask = Http.GetFromJsonAsync<CommunicationDto>($"http://localhost:5000/api/communications/{Id}");
            var historyTask = Http.GetFromJsonAsync<IEnumerable<CommunicationStatusHistoryItemDto>>($"http://localhost:5000/api/communications/{Id}/history");

            await Task.WhenAll(communicationTask, historyTask);
            Console.WriteLine("Found history and comm");
            
            communication = await communicationTask;
            communicationHistory = await historyTask;
            
            Console.WriteLine($"History is null: {communicationHistory == null}");
        Console.WriteLine($"History count: {communicationHistory?.Count()}");
        Console.WriteLine($"History any: {communicationHistory?.Any()}");

        if (communicationHistory != null)
        {
            foreach (var item in communicationHistory)
            {
                Console.WriteLine($"History item: {item.StatusCode} at {item.OccurredUtc}");
            }
        }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching communication data: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }
}